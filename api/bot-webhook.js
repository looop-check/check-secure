// api/bot-webhook.js
import fetch from "node-fetch";
import geoip from "geoip-lite";
import { createClient } from "@supabase/supabase-js";
import jwt from "jsonwebtoken";
import bot from "./lib/bot.js";

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_KEY;
const SELLER_CHAT_ID = process.env.SELLER_CHAT_ID; // –∫–æ–º—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ—É
const VPNAPI_KEY = process.env.VPNAPI_KEY;
const JWT_SECRET = process.env.JWT_SECRET;
const CHANNEL_ID = process.env.CHANNEL_ID; // numeric '-100...' –∏–ª–∏ @username
const INVITE_TTL_SECONDS = Number(process.env.INVITE_TTL_SECONDS || 60); // –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ invite
const INVITE_MEMBER_LIMIT = Number(process.env.INVITE_MEMBER_LIMIT || 1); // –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è

if (!JWT_SECRET) throw new Error("JWT_SECRET not set");
if (!CHANNEL_ID) throw new Error("CHANNEL_ID not set");

const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

function escapeHtml(str = "") {
  return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}

function normalizeIp(raw) {
  if (!raw) return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  const first = raw.split(",")[0].trim();
  if (first.includes("::ffff:")) return first.split("::ffff:").pop();
  return first;
}

async function parseJson(req) {
  return new Promise((resolve, reject) => {
    let body = "";
    req.on("data", (chunk) => (body += chunk.toString()));
    req.on("end", () => {
      try { resolve(JSON.parse(body || "{}")); } catch (e) { reject(e); }
    });
    req.on("error", reject);
  });
}

export default async function handler(req, res) {
  if (req.method !== "POST") return res.status(405).send("Method Not Allowed");

  try {
    // --- –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è token ---
    const auth = req.headers.authorization || req.headers.Authorization;
    if (!auth || !auth.startsWith("Bearer ")) {
      return res.status(403).json({ status: "error", message: "Token required (Authorization: Bearer <token>)" });
    }
    const token = auth.split(" ")[1];

    let payload;
    try {
      payload = jwt.verify(token, JWT_SECRET);
    } catch (e) {
      console.error("JWT verify error:", e);
      return res.status(403).json({ status: "error", message: "Invalid or expired token" });
    }

    const telegramId = payload?.tid;
    if (!telegramId) {
      return res.status(400).json({ status: "error", message: "telegramId not in token" });
    }

    // —Ç–µ–ª–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    const body = req.body && Object.keys(req.body).length ? req.body : await parseJson(req);
    const { browser, os, language, screen, timezone } = body || {};

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    let tgData = null;
    try {
      const { data, error } = await supabase
        .from("users")
        .select("telegram_id, first_name, last_name, username")
        .eq("telegram_id", String(telegramId))
        .single();
      if (data) tgData = data;
      else console.warn("Supabase: user not found:", error);
    } catch (e) {
      console.warn("Supabase select error (non-fatal):", e);
    }

    // IP –∏ –≥–µ–æ
    const ipHeader = req.headers["x-forwarded-for"];
    const ip = normalizeIp(ipHeader || (req.socket && req.socket.remoteAddress) || "");
    const geo = geoip.lookup(ip) || {};
    const country = geo.country || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    const region = geo.region || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    const city = geo.city || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

    // --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ: –ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –†–æ—Å—Å–∏–∏ ---
    const allowedCountries = (process.env.ALLOWED_COUNTRIES || "RU").split(",").map(s => s.trim().toUpperCase()).filter(Boolean);
    if (!geo || !geo.country || !allowedCountries.includes(geo.country)) {
      console.warn(`Access denied for IP=${ip}, geo=${JSON.stringify(geo)}`);
      return res.status(403).json({ status: "error", message: "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –∏–∑ –†–æ—Å—Å–∏–∏" });
    }

    // VPN/ISP –∏–Ω—Ñ–æ —á–µ—Ä–µ–∑ VPNAPI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    let isp = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    let vpnWarning = "";
    if (VPNAPI_KEY && ip && ip !== "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") {
      try {
        const vpnResp = await fetch(`https://vpnapi.io/api/${ip}?key=${VPNAPI_KEY}`);
        const vpnData = await vpnResp.json();
        isp = vpnData.network?.autonomous_system_organization || isp;
        const { vpn, proxy, tor } = vpnData.security || {};
        if (vpn) vpnWarning = "‚ö† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç VPN";
        else if (proxy) vpnWarning = "‚ö† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Proxy";
        else if (tor) vpnWarning = "‚ö† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Tor";
      } catch (e) {
        console.warn("VPNAPI error (non-fatal):", e);
      }
    }

    // --- –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî —Å–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é invite —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
    let inviteLink;
    try {
      const expireDate = Math.floor(Date.now() / 1000) + INVITE_TTL_SECONDS;
      // Telegraf: bot.telegram.createChatInviteLink(chatId, options)
      const invite = await bot.telegram.createChatInviteLink(CHANNEL_ID, {
        expire_date: expireDate,
        member_limit: INVITE_MEMBER_LIMIT,
        name: `verify-${telegramId}-${Date.now()}`
      });
      inviteLink = invite && (invite.invite_link || invite.link || invite.inviteLink) || null;
      if (!inviteLink) throw new Error("Invite link not returned");
    } catch (e) {
      console.error("createChatInviteLink error:", e);
      return res.status(500).json({
        status: "error",
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞ –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è."
      });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º invite –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    try {
      const userMessage = `–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ ‚úÖ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ ${INVITE_TTL_SECONDS}s):\n\n${inviteLink}`;
      await bot.telegram.sendMessage(String(telegramId), userMessage);
    } catch (e) {
      console.error("sendMessage to user error:", e);
      // –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ —É–≤–µ–¥–æ–º–∏–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ –ø–æ–ø—ã—Ç–∫–µ
      // –Ω–æ —Å–æ–æ–±—â–∏–º –∫–ª–∏–µ–Ω—Ç—É –æ–± –æ—à–∏–±–∫–µ
      return res.status(500).json({ status: "error", message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é" });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ–¥–∞–≤—Ü—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    try {
      const messageHtml = `
<b>üë§ Telegram:</b> ${escapeHtml(tgData?.first_name || "")} ${escapeHtml(tgData?.last_name || "")} (@${escapeHtml(tgData?.username || "–Ω–µ—Ç")})
<b>üÜî ID:</b> ${escapeHtml(String(telegramId))}

<b>üåç IP:</b> ${escapeHtml(ip)}
<b>üìå –°—Ç—Ä–∞–Ω–∞:</b> ${escapeHtml(country)}
<b>üèô –†–µ–≥–∏–æ–Ω:</b> ${escapeHtml(region)}
<b>üèò –ì–æ—Ä–æ–¥:</b> ${escapeHtml(city)}
<b>üè¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä:</b> ${escapeHtml(isp)}

${vpnWarning ? `<b>${escapeHtml(vpnWarning)}</b>\n` : ""}
<b>üíª –û–°:</b> ${escapeHtml(os || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}
<b>üåê –Ø–∑—ã–∫:</b> ${escapeHtml(language || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}
<b>‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> ${escapeHtml(timezone || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}
`;
      if (SELLER_CHAT_ID) {
        await bot.telegram.sendMessage(SELLER_CHAT_ID, messageHtml, { parse_mode: "HTML" });
      }
    } catch (e) {
      console.warn("notify seller error (non-fatal):", e);
    }

    // (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ª–æ–≥–∏—Ä—É–µ–º invite –≤ Supabase
    try {
      await supabase.from("invites").insert([{
        telegram_id: String(telegramId),
        ip,
        country,
        region,
        city,
        isp,
        vpn_warning: vpnWarning || null,
        invite_link: inviteLink,
        invite_expires_at: new Date(Date.now() + INVITE_TTL_SECONDS * 1000).toISOString()
      }]);
    } catch (e) {
      // –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
      console.warn("Supabase insert invite error (non-fatal):", e);
    }

    return res.status(200).json({ status: "ok", invite: inviteLink });
  } catch (err) {
    console.error("bot-webhook handler error:", err);
    return res.status(500).json({ status: "error", message: "internal error" });
  }
}
