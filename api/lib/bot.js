import { Telegraf } from "telegraf";
import { createClient } from "@supabase/supabase-js";
import fetch from "node-fetch";

const BOT_TOKEN = process.env.BOT_TOKEN;
const CHANNEL_ID = process.env.CHANNEL_ID;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_KEY;
const SELLER_CHAT_ID = process.env.SELLER_CHAT_ID;
const VPNAPI_KEY = process.env.VPNAPI_KEY;

if (!BOT_TOKEN || !CHANNEL_ID || !SUPABASE_URL || !SUPABASE_KEY || !SELLER_CHAT_ID) {
  throw new Error("Environment variables missing");
}

const bot = new Telegraf(BOT_TOKEN);
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

// üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞–Ω—É –∏ VPN
async function validateUser(ip) {
  const geo = ip ? await fetch(`http://ip-api.com/json/${ip}?fields=countryCode,query`) : { countryCode: null, query: ip };
  let country = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  let vpnWarning = "";

  if (geo && geo.countryCode) country = geo.countryCode;

  if (VPNAPI_KEY && ip) {
    try {
      const vpnResp = await fetch(`https://vpnapi.io/api/${ip}?key=${VPNAPI_KEY}`, { timeout: 10000 });
      const vpnData = await vpnResp.json();
      const { vpn, proxy, tor } = vpnData.security || {};
      if (vpn) vpnWarning = "‚ö† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç VPN";
      else if (proxy) vpnWarning = "‚ö† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Proxy";
      else if (tor) vpnWarning = "‚ö† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Tor";
    } catch (e) {
      console.error("VPNAPI error:", e);
    }
  }

  const ok = country === "RU" && !vpnWarning;
  return { ok, country, vpnWarning };
}

// üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –∏ –∑–∞–ø–∏—Å—å –≤ Supabase
async function generateInvite(telegram_id) {
  const linkData = await bot.telegram.createChatInviteLink(CHANNEL_ID, { member_limit: 1, expire_date: Math.floor(Date.now()/1000)+3600 });
  await supabase.from("invites").insert({
    telegram_id,
    invite_link: linkData.invite_link
  });
  return linkData.invite_link;
}

// /start
bot.start(async (ctx) => {
  try {
    const id = ctx.from.id;
    const ip = ctx.from.ip || ""; // –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–∏–Ω—É—Ç—å —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ –µ—Å—Ç—å

    const { ok, vpnWarning } = await validateUser(ip);

    const tgData = {
      telegram_id: String(id),
      first_name: ctx.from.first_name || "",
      last_name: ctx.from.last_name || "",
      username: ctx.from.username || "",
    };
    await supabase.from("users").upsert([tgData], { onConflict: ["telegram_id"] });

    if (!ok) {
      await bot.telegram.sendMessage(SELLER_CHAT_ID,
        `–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º:\n${JSON.stringify(tgData)}\n${vpnWarning || "–°—Ç—Ä–∞–Ω–∞ –Ω–µ RU"}`
      );
      return ctx.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }

    const invite_link = await generateInvite(id);

    await ctx.reply("‚úÖ –î–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ):", {
      reply_markup: { inline_keyboard: [[{ text: "–í–æ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url: invite_link }]] }
    });

    await bot.telegram.sendMessage(SELLER_CHAT_ID,
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à—ë–Ω:\n<b>${tgData.first_name} ${tgData.last_name}</b> (@${tgData.username})\nID: ${id}\nVPN: ${vpnWarning || "–Ω–µ—Ç"}\nInvite: ${invite_link}`,
      { parse_mode: "HTML" }
    );

  } catch (e) {
    console.error("bot /start error:", e);
    ctx.reply("‚ö† –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.");
  }
});

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É
bot.on("chat_member", async (ctx) => {
  const member = ctx.chatMember;
  if (!member || !member.new_chat_member) return;

  const userId = member.new_chat_member.user.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase invites
  const { data } = await supabase.from("invites").select("*").eq("telegram_id", String(userId)).eq("used", false).limit(1).single();

  if (!data) {
    // –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π, –∫–∏–∫–∞–µ–º
    try { await bot.telegram.kickChatMember(CHANNEL_ID, userId); } catch(e){ console.error(e); }
    return;
  }

  // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
  await supabase.from("invites").update({ used: true }).eq("id", data.id);
});

if (process.env.NODE_ENV !== "production") {
  bot.launch().then(() => console.log("Bot launched locally"));
}

export default bot;
